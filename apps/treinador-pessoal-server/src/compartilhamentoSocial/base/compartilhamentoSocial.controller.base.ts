/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompartilhamentoSocialService } from "../compartilhamentoSocial.service";
import { CompartilhamentoSocialCreateInput } from "./CompartilhamentoSocialCreateInput";
import { CompartilhamentoSocial } from "./CompartilhamentoSocial";
import { CompartilhamentoSocialFindManyArgs } from "./CompartilhamentoSocialFindManyArgs";
import { CompartilhamentoSocialWhereUniqueInput } from "./CompartilhamentoSocialWhereUniqueInput";
import { CompartilhamentoSocialUpdateInput } from "./CompartilhamentoSocialUpdateInput";

export class CompartilhamentoSocialControllerBase {
  constructor(protected readonly service: CompartilhamentoSocialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompartilhamentoSocial })
  async createCompartilhamentoSocial(
    @common.Body() data: CompartilhamentoSocialCreateInput
  ): Promise<CompartilhamentoSocial> {
    return await this.service.createCompartilhamentoSocial({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        progresso: true,
        redeSocial: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CompartilhamentoSocial] })
  @ApiNestedQuery(CompartilhamentoSocialFindManyArgs)
  async compartilhamentoSocials(
    @common.Req() request: Request
  ): Promise<CompartilhamentoSocial[]> {
    const args = plainToClass(
      CompartilhamentoSocialFindManyArgs,
      request.query
    );
    return this.service.compartilhamentoSocials({
      ...args,
      select: {
        createdAt: true,
        id: true,
        progresso: true,
        redeSocial: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompartilhamentoSocial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async compartilhamentoSocial(
    @common.Param() params: CompartilhamentoSocialWhereUniqueInput
  ): Promise<CompartilhamentoSocial | null> {
    const result = await this.service.compartilhamentoSocial({
      where: params,
      select: {
        createdAt: true,
        id: true,
        progresso: true,
        redeSocial: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompartilhamentoSocial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompartilhamentoSocial(
    @common.Param() params: CompartilhamentoSocialWhereUniqueInput,
    @common.Body() data: CompartilhamentoSocialUpdateInput
  ): Promise<CompartilhamentoSocial | null> {
    try {
      return await this.service.updateCompartilhamentoSocial({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          progresso: true,
          redeSocial: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompartilhamentoSocial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompartilhamentoSocial(
    @common.Param() params: CompartilhamentoSocialWhereUniqueInput
  ): Promise<CompartilhamentoSocial | null> {
    try {
      return await this.service.deleteCompartilhamentoSocial({
        where: params,
        select: {
          createdAt: true,
          id: true,
          progresso: true,
          redeSocial: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
