/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerfilDoUsuRioService } from "../perfilDoUsuRio.service";
import { PerfilDoUsuRioCreateInput } from "./PerfilDoUsuRioCreateInput";
import { PerfilDoUsuRio } from "./PerfilDoUsuRio";
import { PerfilDoUsuRioFindManyArgs } from "./PerfilDoUsuRioFindManyArgs";
import { PerfilDoUsuRioWhereUniqueInput } from "./PerfilDoUsuRioWhereUniqueInput";
import { PerfilDoUsuRioUpdateInput } from "./PerfilDoUsuRioUpdateInput";

export class PerfilDoUsuRioControllerBase {
  constructor(protected readonly service: PerfilDoUsuRioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerfilDoUsuRio })
  async createPerfilDoUsuRio(
    @common.Body() data: PerfilDoUsuRioCreateInput
  ): Promise<PerfilDoUsuRio> {
    return await this.service.createPerfilDoUsuRio({
      data: data,
      select: {
        altura: true,
        createdAt: true,
        id: true,
        nVelAtualDeFitness: true,
        objetivosDeFitness: true,
        peso: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerfilDoUsuRio] })
  @ApiNestedQuery(PerfilDoUsuRioFindManyArgs)
  async perfilDoUsuRios(
    @common.Req() request: Request
  ): Promise<PerfilDoUsuRio[]> {
    const args = plainToClass(PerfilDoUsuRioFindManyArgs, request.query);
    return this.service.perfilDoUsuRios({
      ...args,
      select: {
        altura: true,
        createdAt: true,
        id: true,
        nVelAtualDeFitness: true,
        objetivosDeFitness: true,
        peso: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerfilDoUsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async perfilDoUsuRio(
    @common.Param() params: PerfilDoUsuRioWhereUniqueInput
  ): Promise<PerfilDoUsuRio | null> {
    const result = await this.service.perfilDoUsuRio({
      where: params,
      select: {
        altura: true,
        createdAt: true,
        id: true,
        nVelAtualDeFitness: true,
        objetivosDeFitness: true,
        peso: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerfilDoUsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerfilDoUsuRio(
    @common.Param() params: PerfilDoUsuRioWhereUniqueInput,
    @common.Body() data: PerfilDoUsuRioUpdateInput
  ): Promise<PerfilDoUsuRio | null> {
    try {
      return await this.service.updatePerfilDoUsuRio({
        where: params,
        data: data,
        select: {
          altura: true,
          createdAt: true,
          id: true,
          nVelAtualDeFitness: true,
          objetivosDeFitness: true,
          peso: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerfilDoUsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerfilDoUsuRio(
    @common.Param() params: PerfilDoUsuRioWhereUniqueInput
  ): Promise<PerfilDoUsuRio | null> {
    try {
      return await this.service.deletePerfilDoUsuRio({
        where: params,
        select: {
          altura: true,
          createdAt: true,
          id: true,
          nVelAtualDeFitness: true,
          objetivosDeFitness: true,
          peso: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
