/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DesempenhoDoUsuRio as PrismaDesempenhoDoUsuRio,
  ExercCio as PrismaExercCio,
  UsuRio as PrismaUsuRio,
} from "@prisma/client";

export class DesempenhoDoUsuRioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DesempenhoDoUsuRioCountArgs, "select">
  ): Promise<number> {
    return this.prisma.desempenhoDoUsuRio.count(args);
  }

  async desempenhoDoUsuRios<T extends Prisma.DesempenhoDoUsuRioFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesempenhoDoUsuRioFindManyArgs>
  ): Promise<PrismaDesempenhoDoUsuRio[]> {
    return this.prisma.desempenhoDoUsuRio.findMany<Prisma.DesempenhoDoUsuRioFindManyArgs>(
      args
    );
  }
  async desempenhoDoUsuRio<T extends Prisma.DesempenhoDoUsuRioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesempenhoDoUsuRioFindUniqueArgs>
  ): Promise<PrismaDesempenhoDoUsuRio | null> {
    return this.prisma.desempenhoDoUsuRio.findUnique(args);
  }
  async createDesempenhoDoUsuRio<T extends Prisma.DesempenhoDoUsuRioCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesempenhoDoUsuRioCreateArgs>
  ): Promise<PrismaDesempenhoDoUsuRio> {
    return this.prisma.desempenhoDoUsuRio.create<T>(args);
  }
  async updateDesempenhoDoUsuRio<T extends Prisma.DesempenhoDoUsuRioUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesempenhoDoUsuRioUpdateArgs>
  ): Promise<PrismaDesempenhoDoUsuRio> {
    return this.prisma.desempenhoDoUsuRio.update<T>(args);
  }
  async deleteDesempenhoDoUsuRio<T extends Prisma.DesempenhoDoUsuRioDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesempenhoDoUsuRioDeleteArgs>
  ): Promise<PrismaDesempenhoDoUsuRio> {
    return this.prisma.desempenhoDoUsuRio.delete(args);
  }

  async getExercCio(parentId: string): Promise<PrismaExercCio | null> {
    return this.prisma.desempenhoDoUsuRio
      .findUnique({
        where: { id: parentId },
      })
      .exercCio();
  }

  async getUsuRio(parentId: string): Promise<PrismaUsuRio | null> {
    return this.prisma.desempenhoDoUsuRio
      .findUnique({
        where: { id: parentId },
      })
      .usuRio();
  }
}
