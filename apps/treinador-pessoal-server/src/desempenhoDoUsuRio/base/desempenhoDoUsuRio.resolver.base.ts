/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DesempenhoDoUsuRio } from "./DesempenhoDoUsuRio";
import { DesempenhoDoUsuRioCountArgs } from "./DesempenhoDoUsuRioCountArgs";
import { DesempenhoDoUsuRioFindManyArgs } from "./DesempenhoDoUsuRioFindManyArgs";
import { DesempenhoDoUsuRioFindUniqueArgs } from "./DesempenhoDoUsuRioFindUniqueArgs";
import { CreateDesempenhoDoUsuRioArgs } from "./CreateDesempenhoDoUsuRioArgs";
import { UpdateDesempenhoDoUsuRioArgs } from "./UpdateDesempenhoDoUsuRioArgs";
import { DeleteDesempenhoDoUsuRioArgs } from "./DeleteDesempenhoDoUsuRioArgs";
import { ExercCio } from "../../exercCio/base/ExercCio";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { DesempenhoDoUsuRioService } from "../desempenhoDoUsuRio.service";
@graphql.Resolver(() => DesempenhoDoUsuRio)
export class DesempenhoDoUsuRioResolverBase {
  constructor(protected readonly service: DesempenhoDoUsuRioService) {}

  async _desempenhoDoUsuRiosMeta(
    @graphql.Args() args: DesempenhoDoUsuRioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DesempenhoDoUsuRio])
  async desempenhoDoUsuRios(
    @graphql.Args() args: DesempenhoDoUsuRioFindManyArgs
  ): Promise<DesempenhoDoUsuRio[]> {
    return this.service.desempenhoDoUsuRios(args);
  }

  @graphql.Query(() => DesempenhoDoUsuRio, { nullable: true })
  async desempenhoDoUsuRio(
    @graphql.Args() args: DesempenhoDoUsuRioFindUniqueArgs
  ): Promise<DesempenhoDoUsuRio | null> {
    const result = await this.service.desempenhoDoUsuRio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DesempenhoDoUsuRio)
  async createDesempenhoDoUsuRio(
    @graphql.Args() args: CreateDesempenhoDoUsuRioArgs
  ): Promise<DesempenhoDoUsuRio> {
    return await this.service.createDesempenhoDoUsuRio({
      ...args,
      data: {
        ...args.data,

        exercCio: args.data.exercCio
          ? {
              connect: args.data.exercCio,
            }
          : undefined,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DesempenhoDoUsuRio)
  async updateDesempenhoDoUsuRio(
    @graphql.Args() args: UpdateDesempenhoDoUsuRioArgs
  ): Promise<DesempenhoDoUsuRio | null> {
    try {
      return await this.service.updateDesempenhoDoUsuRio({
        ...args,
        data: {
          ...args.data,

          exercCio: args.data.exercCio
            ? {
                connect: args.data.exercCio,
              }
            : undefined,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DesempenhoDoUsuRio)
  async deleteDesempenhoDoUsuRio(
    @graphql.Args() args: DeleteDesempenhoDoUsuRioArgs
  ): Promise<DesempenhoDoUsuRio | null> {
    try {
      return await this.service.deleteDesempenhoDoUsuRio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ExercCio, {
    nullable: true,
    name: "exercCio",
  })
  async getExercCio(
    @graphql.Parent() parent: DesempenhoDoUsuRio
  ): Promise<ExercCio | null> {
    const result = await this.service.getExercCio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: DesempenhoDoUsuRio
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
