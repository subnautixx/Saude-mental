/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DesempenhoDoUsuRioService } from "../desempenhoDoUsuRio.service";
import { DesempenhoDoUsuRioCreateInput } from "./DesempenhoDoUsuRioCreateInput";
import { DesempenhoDoUsuRio } from "./DesempenhoDoUsuRio";
import { DesempenhoDoUsuRioFindManyArgs } from "./DesempenhoDoUsuRioFindManyArgs";
import { DesempenhoDoUsuRioWhereUniqueInput } from "./DesempenhoDoUsuRioWhereUniqueInput";
import { DesempenhoDoUsuRioUpdateInput } from "./DesempenhoDoUsuRioUpdateInput";

export class DesempenhoDoUsuRioControllerBase {
  constructor(protected readonly service: DesempenhoDoUsuRioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DesempenhoDoUsuRio })
  async createDesempenhoDoUsuRio(
    @common.Body() data: DesempenhoDoUsuRioCreateInput
  ): Promise<DesempenhoDoUsuRio> {
    return await this.service.createDesempenhoDoUsuRio({
      data: {
        ...data,

        exercCio: data.exercCio
          ? {
              connect: data.exercCio,
            }
          : undefined,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        data: true,

        exercCio: {
          select: {
            id: true,
          },
        },

        id: true,
        observaEs: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DesempenhoDoUsuRio] })
  @ApiNestedQuery(DesempenhoDoUsuRioFindManyArgs)
  async desempenhoDoUsuRios(
    @common.Req() request: Request
  ): Promise<DesempenhoDoUsuRio[]> {
    const args = plainToClass(DesempenhoDoUsuRioFindManyArgs, request.query);
    return this.service.desempenhoDoUsuRios({
      ...args,
      select: {
        createdAt: true,
        data: true,

        exercCio: {
          select: {
            id: true,
          },
        },

        id: true,
        observaEs: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DesempenhoDoUsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async desempenhoDoUsuRio(
    @common.Param() params: DesempenhoDoUsuRioWhereUniqueInput
  ): Promise<DesempenhoDoUsuRio | null> {
    const result = await this.service.desempenhoDoUsuRio({
      where: params,
      select: {
        createdAt: true,
        data: true,

        exercCio: {
          select: {
            id: true,
          },
        },

        id: true,
        observaEs: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DesempenhoDoUsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDesempenhoDoUsuRio(
    @common.Param() params: DesempenhoDoUsuRioWhereUniqueInput,
    @common.Body() data: DesempenhoDoUsuRioUpdateInput
  ): Promise<DesempenhoDoUsuRio | null> {
    try {
      return await this.service.updateDesempenhoDoUsuRio({
        where: params,
        data: {
          ...data,

          exercCio: data.exercCio
            ? {
                connect: data.exercCio,
              }
            : undefined,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          data: true,

          exercCio: {
            select: {
              id: true,
            },
          },

          id: true,
          observaEs: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DesempenhoDoUsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDesempenhoDoUsuRio(
    @common.Param() params: DesempenhoDoUsuRioWhereUniqueInput
  ): Promise<DesempenhoDoUsuRio | null> {
    try {
      return await this.service.deleteDesempenhoDoUsuRio({
        where: params,
        select: {
          createdAt: true,
          data: true,

          exercCio: {
            select: {
              id: true,
            },
          },

          id: true,
          observaEs: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
