/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsuRioService } from "../usuRio.service";
import { UsuRioCreateInput } from "./UsuRioCreateInput";
import { UsuRio } from "./UsuRio";
import { UsuRioFindManyArgs } from "./UsuRioFindManyArgs";
import { UsuRioWhereUniqueInput } from "./UsuRioWhereUniqueInput";
import { UsuRioUpdateInput } from "./UsuRioUpdateInput";
import { CompartilhamentoSocialFindManyArgs } from "../../compartilhamentoSocial/base/CompartilhamentoSocialFindManyArgs";
import { CompartilhamentoSocial } from "../../compartilhamentoSocial/base/CompartilhamentoSocial";
import { CompartilhamentoSocialWhereUniqueInput } from "../../compartilhamentoSocial/base/CompartilhamentoSocialWhereUniqueInput";
import { DesempenhoDoUsuRioFindManyArgs } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRioFindManyArgs";
import { DesempenhoDoUsuRio } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRio";
import { DesempenhoDoUsuRioWhereUniqueInput } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRioWhereUniqueInput";
import { MetasFitnesFindManyArgs } from "../../metasFitnes/base/MetasFitnesFindManyArgs";
import { MetasFitnes } from "../../metasFitnes/base/MetasFitnes";
import { MetasFitnesWhereUniqueInput } from "../../metasFitnes/base/MetasFitnesWhereUniqueInput";
import { PlanoDeTreinoFindManyArgs } from "../../planoDeTreino/base/PlanoDeTreinoFindManyArgs";
import { PlanoDeTreino } from "../../planoDeTreino/base/PlanoDeTreino";
import { PlanoDeTreinoWhereUniqueInput } from "../../planoDeTreino/base/PlanoDeTreinoWhereUniqueInput";
import { RealizaEsERecompensasFindManyArgs } from "../../realizaEsERecompensas/base/RealizaEsERecompensasFindManyArgs";
import { RealizaEsERecompensas } from "../../realizaEsERecompensas/base/RealizaEsERecompensas";
import { RealizaEsERecompensasWhereUniqueInput } from "../../realizaEsERecompensas/base/RealizaEsERecompensasWhereUniqueInput";

export class UsuRioControllerBase {
  constructor(protected readonly service: UsuRioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UsuRio })
  async createUsuRio(@common.Body() data: UsuRioCreateInput): Promise<UsuRio> {
    return await this.service.createUsuRio({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        idade: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UsuRio] })
  @ApiNestedQuery(UsuRioFindManyArgs)
  async usuRios(@common.Req() request: Request): Promise<UsuRio[]> {
    const args = plainToClass(UsuRioFindManyArgs, request.query);
    return this.service.usuRios({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        idade: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async usuRio(
    @common.Param() params: UsuRioWhereUniqueInput
  ): Promise<UsuRio | null> {
    const result = await this.service.usuRio({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        idade: true,
        nome: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsuRio(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() data: UsuRioUpdateInput
  ): Promise<UsuRio | null> {
    try {
      return await this.service.updateUsuRio({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          idade: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UsuRio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsuRio(
    @common.Param() params: UsuRioWhereUniqueInput
  ): Promise<UsuRio | null> {
    try {
      return await this.service.deleteUsuRio({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          idade: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/compartilhamentoSocials")
  @ApiNestedQuery(CompartilhamentoSocialFindManyArgs)
  async findCompartilhamentoSocials(
    @common.Req() request: Request,
    @common.Param() params: UsuRioWhereUniqueInput
  ): Promise<CompartilhamentoSocial[]> {
    const query = plainToClass(
      CompartilhamentoSocialFindManyArgs,
      request.query
    );
    const results = await this.service.findCompartilhamentoSocials(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        progresso: true,
        redeSocial: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/compartilhamentoSocials")
  async connectCompartilhamentoSocials(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: CompartilhamentoSocialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      compartilhamentoSocials: {
        connect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/compartilhamentoSocials")
  async updateCompartilhamentoSocials(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: CompartilhamentoSocialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      compartilhamentoSocials: {
        set: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/compartilhamentoSocials")
  async disconnectCompartilhamentoSocials(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: CompartilhamentoSocialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      compartilhamentoSocials: {
        disconnect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/desempenhoDoUsuRios")
  @ApiNestedQuery(DesempenhoDoUsuRioFindManyArgs)
  async findDesempenhoDoUsuRios(
    @common.Req() request: Request,
    @common.Param() params: UsuRioWhereUniqueInput
  ): Promise<DesempenhoDoUsuRio[]> {
    const query = plainToClass(DesempenhoDoUsuRioFindManyArgs, request.query);
    const results = await this.service.findDesempenhoDoUsuRios(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,

        exercCio: {
          select: {
            id: true,
          },
        },

        id: true,
        observaEs: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/desempenhoDoUsuRios")
  async connectDesempenhoDoUsuRios(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: DesempenhoDoUsuRioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      desempenhoDoUsuRios: {
        connect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/desempenhoDoUsuRios")
  async updateDesempenhoDoUsuRios(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: DesempenhoDoUsuRioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      desempenhoDoUsuRios: {
        set: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/desempenhoDoUsuRios")
  async disconnectDesempenhoDoUsuRios(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: DesempenhoDoUsuRioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      desempenhoDoUsuRios: {
        disconnect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/metasFitnesItems")
  @ApiNestedQuery(MetasFitnesFindManyArgs)
  async findMetasFitnesItems(
    @common.Req() request: Request,
    @common.Param() params: UsuRioWhereUniqueInput
  ): Promise<MetasFitnes[]> {
    const query = plainToClass(MetasFitnesFindManyArgs, request.query);
    const results = await this.service.findMetasFitnesItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        metaDeCurtoPrazo: true,
        metaDeLongoPrazo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/metasFitnesItems")
  async connectMetasFitnesItems(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: MetasFitnesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      metasFitnesItems: {
        connect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/metasFitnesItems")
  async updateMetasFitnesItems(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: MetasFitnesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      metasFitnesItems: {
        set: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/metasFitnesItems")
  async disconnectMetasFitnesItems(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: MetasFitnesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      metasFitnesItems: {
        disconnect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/planoDeTreinos")
  @ApiNestedQuery(PlanoDeTreinoFindManyArgs)
  async findPlanoDeTreinos(
    @common.Req() request: Request,
    @common.Param() params: UsuRioWhereUniqueInput
  ): Promise<PlanoDeTreino[]> {
    const query = plainToClass(PlanoDeTreinoFindManyArgs, request.query);
    const results = await this.service.findPlanoDeTreinos(params.id, {
      ...query,
      select: {
        createdAt: true,
        descriO: true,
        duraOSemanas: true,
        id: true,
        tTulo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/planoDeTreinos")
  async connectPlanoDeTreinos(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: PlanoDeTreinoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      planoDeTreinos: {
        connect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/planoDeTreinos")
  async updatePlanoDeTreinos(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: PlanoDeTreinoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      planoDeTreinos: {
        set: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/planoDeTreinos")
  async disconnectPlanoDeTreinos(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: PlanoDeTreinoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      planoDeTreinos: {
        disconnect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/realizaEsERecompensasItems")
  @ApiNestedQuery(RealizaEsERecompensasFindManyArgs)
  async findRealizaEsERecompensasItems(
    @common.Req() request: Request,
    @common.Param() params: UsuRioWhereUniqueInput
  ): Promise<RealizaEsERecompensas[]> {
    const query = plainToClass(
      RealizaEsERecompensasFindManyArgs,
      request.query
    );
    const results = await this.service.findRealizaEsERecompensasItems(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,
          realizaO: true,
          recompensa: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/realizaEsERecompensasItems")
  async connectRealizaEsERecompensasItems(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: RealizaEsERecompensasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      realizaEsERecompensasItems: {
        connect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/realizaEsERecompensasItems")
  async updateRealizaEsERecompensasItems(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: RealizaEsERecompensasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      realizaEsERecompensasItems: {
        set: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/realizaEsERecompensasItems")
  async disconnectRealizaEsERecompensasItems(
    @common.Param() params: UsuRioWhereUniqueInput,
    @common.Body() body: RealizaEsERecompensasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      realizaEsERecompensasItems: {
        disconnect: body,
      },
    };
    await this.service.updateUsuRio({
      where: params,
      data,
      select: { id: true },
    });
  }
}
