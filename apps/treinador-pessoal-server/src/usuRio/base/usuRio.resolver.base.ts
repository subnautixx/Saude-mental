/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UsuRio } from "./UsuRio";
import { UsuRioCountArgs } from "./UsuRioCountArgs";
import { UsuRioFindManyArgs } from "./UsuRioFindManyArgs";
import { UsuRioFindUniqueArgs } from "./UsuRioFindUniqueArgs";
import { CreateUsuRioArgs } from "./CreateUsuRioArgs";
import { UpdateUsuRioArgs } from "./UpdateUsuRioArgs";
import { DeleteUsuRioArgs } from "./DeleteUsuRioArgs";
import { CompartilhamentoSocialFindManyArgs } from "../../compartilhamentoSocial/base/CompartilhamentoSocialFindManyArgs";
import { CompartilhamentoSocial } from "../../compartilhamentoSocial/base/CompartilhamentoSocial";
import { DesempenhoDoUsuRioFindManyArgs } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRioFindManyArgs";
import { DesempenhoDoUsuRio } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRio";
import { MetasFitnesFindManyArgs } from "../../metasFitnes/base/MetasFitnesFindManyArgs";
import { MetasFitnes } from "../../metasFitnes/base/MetasFitnes";
import { PlanoDeTreinoFindManyArgs } from "../../planoDeTreino/base/PlanoDeTreinoFindManyArgs";
import { PlanoDeTreino } from "../../planoDeTreino/base/PlanoDeTreino";
import { RealizaEsERecompensasFindManyArgs } from "../../realizaEsERecompensas/base/RealizaEsERecompensasFindManyArgs";
import { RealizaEsERecompensas } from "../../realizaEsERecompensas/base/RealizaEsERecompensas";
import { UsuRioService } from "../usuRio.service";
@graphql.Resolver(() => UsuRio)
export class UsuRioResolverBase {
  constructor(protected readonly service: UsuRioService) {}

  async _usuRiosMeta(
    @graphql.Args() args: UsuRioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UsuRio])
  async usuRios(@graphql.Args() args: UsuRioFindManyArgs): Promise<UsuRio[]> {
    return this.service.usuRios(args);
  }

  @graphql.Query(() => UsuRio, { nullable: true })
  async usuRio(
    @graphql.Args() args: UsuRioFindUniqueArgs
  ): Promise<UsuRio | null> {
    const result = await this.service.usuRio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UsuRio)
  async createUsuRio(@graphql.Args() args: CreateUsuRioArgs): Promise<UsuRio> {
    return await this.service.createUsuRio({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UsuRio)
  async updateUsuRio(
    @graphql.Args() args: UpdateUsuRioArgs
  ): Promise<UsuRio | null> {
    try {
      return await this.service.updateUsuRio({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsuRio)
  async deleteUsuRio(
    @graphql.Args() args: DeleteUsuRioArgs
  ): Promise<UsuRio | null> {
    try {
      return await this.service.deleteUsuRio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CompartilhamentoSocial], {
    name: "compartilhamentoSocials",
  })
  async findCompartilhamentoSocials(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: CompartilhamentoSocialFindManyArgs
  ): Promise<CompartilhamentoSocial[]> {
    const results = await this.service.findCompartilhamentoSocials(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [DesempenhoDoUsuRio], {
    name: "desempenhoDoUsuRios",
  })
  async findDesempenhoDoUsuRios(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: DesempenhoDoUsuRioFindManyArgs
  ): Promise<DesempenhoDoUsuRio[]> {
    const results = await this.service.findDesempenhoDoUsuRios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [MetasFitnes], { name: "metasFitnesItems" })
  async findMetasFitnesItems(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: MetasFitnesFindManyArgs
  ): Promise<MetasFitnes[]> {
    const results = await this.service.findMetasFitnesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PlanoDeTreino], { name: "planoDeTreinos" })
  async findPlanoDeTreinos(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: PlanoDeTreinoFindManyArgs
  ): Promise<PlanoDeTreino[]> {
    const results = await this.service.findPlanoDeTreinos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RealizaEsERecompensas], {
    name: "realizaEsERecompensasItems",
  })
  async findRealizaEsERecompensasItems(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: RealizaEsERecompensasFindManyArgs
  ): Promise<RealizaEsERecompensas[]> {
    const results = await this.service.findRealizaEsERecompensasItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
