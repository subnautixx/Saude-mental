/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UsuRio as PrismaUsuRio,
  CompartilhamentoSocial as PrismaCompartilhamentoSocial,
  DesempenhoDoUsuRio as PrismaDesempenhoDoUsuRio,
  MetasFitnes as PrismaMetasFitnes,
  PlanoDeTreino as PrismaPlanoDeTreino,
  RealizaEsERecompensas as PrismaRealizaEsERecompensas,
} from "@prisma/client";

export class UsuRioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UsuRioCountArgs, "select">): Promise<number> {
    return this.prisma.usuRio.count(args);
  }

  async usuRios<T extends Prisma.UsuRioFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsuRioFindManyArgs>
  ): Promise<PrismaUsuRio[]> {
    return this.prisma.usuRio.findMany<Prisma.UsuRioFindManyArgs>(args);
  }
  async usuRio<T extends Prisma.UsuRioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsuRioFindUniqueArgs>
  ): Promise<PrismaUsuRio | null> {
    return this.prisma.usuRio.findUnique(args);
  }
  async createUsuRio<T extends Prisma.UsuRioCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsuRioCreateArgs>
  ): Promise<PrismaUsuRio> {
    return this.prisma.usuRio.create<T>(args);
  }
  async updateUsuRio<T extends Prisma.UsuRioUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsuRioUpdateArgs>
  ): Promise<PrismaUsuRio> {
    return this.prisma.usuRio.update<T>(args);
  }
  async deleteUsuRio<T extends Prisma.UsuRioDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsuRioDeleteArgs>
  ): Promise<PrismaUsuRio> {
    return this.prisma.usuRio.delete(args);
  }

  async findCompartilhamentoSocials(
    parentId: string,
    args: Prisma.CompartilhamentoSocialFindManyArgs
  ): Promise<PrismaCompartilhamentoSocial[]> {
    return this.prisma.usuRio
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .compartilhamentoSocials(args);
  }

  async findDesempenhoDoUsuRios(
    parentId: string,
    args: Prisma.DesempenhoDoUsuRioFindManyArgs
  ): Promise<PrismaDesempenhoDoUsuRio[]> {
    return this.prisma.usuRio
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .desempenhoDoUsuRios(args);
  }

  async findMetasFitnesItems(
    parentId: string,
    args: Prisma.MetasFitnesFindManyArgs
  ): Promise<PrismaMetasFitnes[]> {
    return this.prisma.usuRio
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .metasFitnesItems(args);
  }

  async findPlanoDeTreinos(
    parentId: string,
    args: Prisma.PlanoDeTreinoFindManyArgs
  ): Promise<PrismaPlanoDeTreino[]> {
    return this.prisma.usuRio
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .planoDeTreinos(args);
  }

  async findRealizaEsERecompensasItems(
    parentId: string,
    args: Prisma.RealizaEsERecompensasFindManyArgs
  ): Promise<PrismaRealizaEsERecompensas[]> {
    return this.prisma.usuRio
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .realizaEsERecompensasItems(args);
  }
}
