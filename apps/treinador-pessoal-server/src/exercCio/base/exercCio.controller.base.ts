/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExercCioService } from "../exercCio.service";
import { ExercCioCreateInput } from "./ExercCioCreateInput";
import { ExercCio } from "./ExercCio";
import { ExercCioFindManyArgs } from "./ExercCioFindManyArgs";
import { ExercCioWhereUniqueInput } from "./ExercCioWhereUniqueInput";
import { ExercCioUpdateInput } from "./ExercCioUpdateInput";
import { DesempenhoDoUsuRioFindManyArgs } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRioFindManyArgs";
import { DesempenhoDoUsuRio } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRio";
import { DesempenhoDoUsuRioWhereUniqueInput } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRioWhereUniqueInput";

export class ExercCioControllerBase {
  constructor(protected readonly service: ExercCioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExercCio })
  async createExercCio(
    @common.Body() data: ExercCioCreateInput
  ): Promise<ExercCio> {
    return await this.service.createExercCio({
      data: {
        ...data,

        planoDeTreino: data.planoDeTreino
          ? {
              connect: data.planoDeTreino,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        duraOMinutos: true,
        id: true,
        nome: true,

        planoDeTreino: {
          select: {
            id: true,
          },
        },

        tipo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExercCio] })
  @ApiNestedQuery(ExercCioFindManyArgs)
  async exercCios(@common.Req() request: Request): Promise<ExercCio[]> {
    const args = plainToClass(ExercCioFindManyArgs, request.query);
    return this.service.exercCios({
      ...args,
      select: {
        createdAt: true,
        duraOMinutos: true,
        id: true,
        nome: true,

        planoDeTreino: {
          select: {
            id: true,
          },
        },

        tipo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExercCio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async exercCio(
    @common.Param() params: ExercCioWhereUniqueInput
  ): Promise<ExercCio | null> {
    const result = await this.service.exercCio({
      where: params,
      select: {
        createdAt: true,
        duraOMinutos: true,
        id: true,
        nome: true,

        planoDeTreino: {
          select: {
            id: true,
          },
        },

        tipo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExercCio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExercCio(
    @common.Param() params: ExercCioWhereUniqueInput,
    @common.Body() data: ExercCioUpdateInput
  ): Promise<ExercCio | null> {
    try {
      return await this.service.updateExercCio({
        where: params,
        data: {
          ...data,

          planoDeTreino: data.planoDeTreino
            ? {
                connect: data.planoDeTreino,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          duraOMinutos: true,
          id: true,
          nome: true,

          planoDeTreino: {
            select: {
              id: true,
            },
          },

          tipo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExercCio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExercCio(
    @common.Param() params: ExercCioWhereUniqueInput
  ): Promise<ExercCio | null> {
    try {
      return await this.service.deleteExercCio({
        where: params,
        select: {
          createdAt: true,
          duraOMinutos: true,
          id: true,
          nome: true,

          planoDeTreino: {
            select: {
              id: true,
            },
          },

          tipo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/desempenhoDoUsuRios")
  @ApiNestedQuery(DesempenhoDoUsuRioFindManyArgs)
  async findDesempenhoDoUsuRios(
    @common.Req() request: Request,
    @common.Param() params: ExercCioWhereUniqueInput
  ): Promise<DesempenhoDoUsuRio[]> {
    const query = plainToClass(DesempenhoDoUsuRioFindManyArgs, request.query);
    const results = await this.service.findDesempenhoDoUsuRios(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,

        exercCio: {
          select: {
            id: true,
          },
        },

        id: true,
        observaEs: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/desempenhoDoUsuRios")
  async connectDesempenhoDoUsuRios(
    @common.Param() params: ExercCioWhereUniqueInput,
    @common.Body() body: DesempenhoDoUsuRioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      desempenhoDoUsuRios: {
        connect: body,
      },
    };
    await this.service.updateExercCio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/desempenhoDoUsuRios")
  async updateDesempenhoDoUsuRios(
    @common.Param() params: ExercCioWhereUniqueInput,
    @common.Body() body: DesempenhoDoUsuRioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      desempenhoDoUsuRios: {
        set: body,
      },
    };
    await this.service.updateExercCio({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/desempenhoDoUsuRios")
  async disconnectDesempenhoDoUsuRios(
    @common.Param() params: ExercCioWhereUniqueInput,
    @common.Body() body: DesempenhoDoUsuRioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      desempenhoDoUsuRios: {
        disconnect: body,
      },
    };
    await this.service.updateExercCio({
      where: params,
      data,
      select: { id: true },
    });
  }
}
