/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ExercCio as PrismaExercCio,
  DesempenhoDoUsuRio as PrismaDesempenhoDoUsuRio,
  PlanoDeTreino as PrismaPlanoDeTreino,
} from "@prisma/client";

export class ExercCioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ExercCioCountArgs, "select">): Promise<number> {
    return this.prisma.exercCio.count(args);
  }

  async exercCios<T extends Prisma.ExercCioFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExercCioFindManyArgs>
  ): Promise<PrismaExercCio[]> {
    return this.prisma.exercCio.findMany<Prisma.ExercCioFindManyArgs>(args);
  }
  async exercCio<T extends Prisma.ExercCioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExercCioFindUniqueArgs>
  ): Promise<PrismaExercCio | null> {
    return this.prisma.exercCio.findUnique(args);
  }
  async createExercCio<T extends Prisma.ExercCioCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExercCioCreateArgs>
  ): Promise<PrismaExercCio> {
    return this.prisma.exercCio.create<T>(args);
  }
  async updateExercCio<T extends Prisma.ExercCioUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExercCioUpdateArgs>
  ): Promise<PrismaExercCio> {
    return this.prisma.exercCio.update<T>(args);
  }
  async deleteExercCio<T extends Prisma.ExercCioDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExercCioDeleteArgs>
  ): Promise<PrismaExercCio> {
    return this.prisma.exercCio.delete(args);
  }

  async findDesempenhoDoUsuRios(
    parentId: string,
    args: Prisma.DesempenhoDoUsuRioFindManyArgs
  ): Promise<PrismaDesempenhoDoUsuRio[]> {
    return this.prisma.exercCio
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .desempenhoDoUsuRios(args);
  }

  async getPlanoDeTreino(
    parentId: string
  ): Promise<PrismaPlanoDeTreino | null> {
    return this.prisma.exercCio
      .findUnique({
        where: { id: parentId },
      })
      .planoDeTreino();
  }
}
