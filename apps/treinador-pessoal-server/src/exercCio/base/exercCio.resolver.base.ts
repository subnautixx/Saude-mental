/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExercCio } from "./ExercCio";
import { ExercCioCountArgs } from "./ExercCioCountArgs";
import { ExercCioFindManyArgs } from "./ExercCioFindManyArgs";
import { ExercCioFindUniqueArgs } from "./ExercCioFindUniqueArgs";
import { CreateExercCioArgs } from "./CreateExercCioArgs";
import { UpdateExercCioArgs } from "./UpdateExercCioArgs";
import { DeleteExercCioArgs } from "./DeleteExercCioArgs";
import { DesempenhoDoUsuRioFindManyArgs } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRioFindManyArgs";
import { DesempenhoDoUsuRio } from "../../desempenhoDoUsuRio/base/DesempenhoDoUsuRio";
import { PlanoDeTreino } from "../../planoDeTreino/base/PlanoDeTreino";
import { ExercCioService } from "../exercCio.service";
@graphql.Resolver(() => ExercCio)
export class ExercCioResolverBase {
  constructor(protected readonly service: ExercCioService) {}

  async _exercCiosMeta(
    @graphql.Args() args: ExercCioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExercCio])
  async exercCios(
    @graphql.Args() args: ExercCioFindManyArgs
  ): Promise<ExercCio[]> {
    return this.service.exercCios(args);
  }

  @graphql.Query(() => ExercCio, { nullable: true })
  async exercCio(
    @graphql.Args() args: ExercCioFindUniqueArgs
  ): Promise<ExercCio | null> {
    const result = await this.service.exercCio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExercCio)
  async createExercCio(
    @graphql.Args() args: CreateExercCioArgs
  ): Promise<ExercCio> {
    return await this.service.createExercCio({
      ...args,
      data: {
        ...args.data,

        planoDeTreino: args.data.planoDeTreino
          ? {
              connect: args.data.planoDeTreino,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ExercCio)
  async updateExercCio(
    @graphql.Args() args: UpdateExercCioArgs
  ): Promise<ExercCio | null> {
    try {
      return await this.service.updateExercCio({
        ...args,
        data: {
          ...args.data,

          planoDeTreino: args.data.planoDeTreino
            ? {
                connect: args.data.planoDeTreino,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExercCio)
  async deleteExercCio(
    @graphql.Args() args: DeleteExercCioArgs
  ): Promise<ExercCio | null> {
    try {
      return await this.service.deleteExercCio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DesempenhoDoUsuRio], {
    name: "desempenhoDoUsuRios",
  })
  async findDesempenhoDoUsuRios(
    @graphql.Parent() parent: ExercCio,
    @graphql.Args() args: DesempenhoDoUsuRioFindManyArgs
  ): Promise<DesempenhoDoUsuRio[]> {
    const results = await this.service.findDesempenhoDoUsuRios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => PlanoDeTreino, {
    nullable: true,
    name: "planoDeTreino",
  })
  async getPlanoDeTreino(
    @graphql.Parent() parent: ExercCio
  ): Promise<PlanoDeTreino | null> {
    const result = await this.service.getPlanoDeTreino(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
