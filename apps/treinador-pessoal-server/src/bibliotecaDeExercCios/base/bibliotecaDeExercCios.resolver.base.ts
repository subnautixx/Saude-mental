/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BibliotecaDeExercCios } from "./BibliotecaDeExercCios";
import { BibliotecaDeExercCiosCountArgs } from "./BibliotecaDeExercCiosCountArgs";
import { BibliotecaDeExercCiosFindManyArgs } from "./BibliotecaDeExercCiosFindManyArgs";
import { BibliotecaDeExercCiosFindUniqueArgs } from "./BibliotecaDeExercCiosFindUniqueArgs";
import { CreateBibliotecaDeExercCiosArgs } from "./CreateBibliotecaDeExercCiosArgs";
import { UpdateBibliotecaDeExercCiosArgs } from "./UpdateBibliotecaDeExercCiosArgs";
import { DeleteBibliotecaDeExercCiosArgs } from "./DeleteBibliotecaDeExercCiosArgs";
import { BibliotecaDeExercCiosService } from "../bibliotecaDeExercCios.service";
@graphql.Resolver(() => BibliotecaDeExercCios)
export class BibliotecaDeExercCiosResolverBase {
  constructor(protected readonly service: BibliotecaDeExercCiosService) {}

  async _bibliotecaDeExercCiosItemsMeta(
    @graphql.Args() args: BibliotecaDeExercCiosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BibliotecaDeExercCios])
  async bibliotecaDeExercCiosItems(
    @graphql.Args() args: BibliotecaDeExercCiosFindManyArgs
  ): Promise<BibliotecaDeExercCios[]> {
    return this.service.bibliotecaDeExercCiosItems(args);
  }

  @graphql.Query(() => BibliotecaDeExercCios, { nullable: true })
  async bibliotecaDeExercCios(
    @graphql.Args() args: BibliotecaDeExercCiosFindUniqueArgs
  ): Promise<BibliotecaDeExercCios | null> {
    const result = await this.service.bibliotecaDeExercCios(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BibliotecaDeExercCios)
  async createBibliotecaDeExercCios(
    @graphql.Args() args: CreateBibliotecaDeExercCiosArgs
  ): Promise<BibliotecaDeExercCios> {
    return await this.service.createBibliotecaDeExercCios({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BibliotecaDeExercCios)
  async updateBibliotecaDeExercCios(
    @graphql.Args() args: UpdateBibliotecaDeExercCiosArgs
  ): Promise<BibliotecaDeExercCios | null> {
    try {
      return await this.service.updateBibliotecaDeExercCios({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BibliotecaDeExercCios)
  async deleteBibliotecaDeExercCios(
    @graphql.Args() args: DeleteBibliotecaDeExercCiosArgs
  ): Promise<BibliotecaDeExercCios | null> {
    try {
      return await this.service.deleteBibliotecaDeExercCios(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
