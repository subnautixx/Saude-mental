/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BibliotecaDeExercCiosService } from "../bibliotecaDeExercCios.service";
import { BibliotecaDeExercCiosCreateInput } from "./BibliotecaDeExercCiosCreateInput";
import { BibliotecaDeExercCios } from "./BibliotecaDeExercCios";
import { BibliotecaDeExercCiosFindManyArgs } from "./BibliotecaDeExercCiosFindManyArgs";
import { BibliotecaDeExercCiosWhereUniqueInput } from "./BibliotecaDeExercCiosWhereUniqueInput";
import { BibliotecaDeExercCiosUpdateInput } from "./BibliotecaDeExercCiosUpdateInput";

export class BibliotecaDeExercCiosControllerBase {
  constructor(protected readonly service: BibliotecaDeExercCiosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BibliotecaDeExercCios })
  async createBibliotecaDeExercCios(
    @common.Body() data: BibliotecaDeExercCiosCreateInput
  ): Promise<BibliotecaDeExercCios> {
    return await this.service.createBibliotecaDeExercCios({
      data: data,
      select: {
        categoria: true,
        createdAt: true,
        id: true,
        instruEs: true,
        nome: true,
        updatedAt: true,
        vDeoLink: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BibliotecaDeExercCios] })
  @ApiNestedQuery(BibliotecaDeExercCiosFindManyArgs)
  async bibliotecaDeExercCiosItems(
    @common.Req() request: Request
  ): Promise<BibliotecaDeExercCios[]> {
    const args = plainToClass(BibliotecaDeExercCiosFindManyArgs, request.query);
    return this.service.bibliotecaDeExercCiosItems({
      ...args,
      select: {
        categoria: true,
        createdAt: true,
        id: true,
        instruEs: true,
        nome: true,
        updatedAt: true,
        vDeoLink: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BibliotecaDeExercCios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bibliotecaDeExercCios(
    @common.Param() params: BibliotecaDeExercCiosWhereUniqueInput
  ): Promise<BibliotecaDeExercCios | null> {
    const result = await this.service.bibliotecaDeExercCios({
      where: params,
      select: {
        categoria: true,
        createdAt: true,
        id: true,
        instruEs: true,
        nome: true,
        updatedAt: true,
        vDeoLink: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BibliotecaDeExercCios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBibliotecaDeExercCios(
    @common.Param() params: BibliotecaDeExercCiosWhereUniqueInput,
    @common.Body() data: BibliotecaDeExercCiosUpdateInput
  ): Promise<BibliotecaDeExercCios | null> {
    try {
      return await this.service.updateBibliotecaDeExercCios({
        where: params,
        data: data,
        select: {
          categoria: true,
          createdAt: true,
          id: true,
          instruEs: true,
          nome: true,
          updatedAt: true,
          vDeoLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BibliotecaDeExercCios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBibliotecaDeExercCios(
    @common.Param() params: BibliotecaDeExercCiosWhereUniqueInput
  ): Promise<BibliotecaDeExercCios | null> {
    try {
      return await this.service.deleteBibliotecaDeExercCios({
        where: params,
        select: {
          categoria: true,
          createdAt: true,
          id: true,
          instruEs: true,
          nome: true,
          updatedAt: true,
          vDeoLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
