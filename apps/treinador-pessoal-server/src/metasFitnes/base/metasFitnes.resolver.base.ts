/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MetasFitnes } from "./MetasFitnes";
import { MetasFitnesCountArgs } from "./MetasFitnesCountArgs";
import { MetasFitnesFindManyArgs } from "./MetasFitnesFindManyArgs";
import { MetasFitnesFindUniqueArgs } from "./MetasFitnesFindUniqueArgs";
import { CreateMetasFitnesArgs } from "./CreateMetasFitnesArgs";
import { UpdateMetasFitnesArgs } from "./UpdateMetasFitnesArgs";
import { DeleteMetasFitnesArgs } from "./DeleteMetasFitnesArgs";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { MetasFitnesService } from "../metasFitnes.service";
@graphql.Resolver(() => MetasFitnes)
export class MetasFitnesResolverBase {
  constructor(protected readonly service: MetasFitnesService) {}

  async _metasFitnesItemsMeta(
    @graphql.Args() args: MetasFitnesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MetasFitnes])
  async metasFitnesItems(
    @graphql.Args() args: MetasFitnesFindManyArgs
  ): Promise<MetasFitnes[]> {
    return this.service.metasFitnesItems(args);
  }

  @graphql.Query(() => MetasFitnes, { nullable: true })
  async metasFitnes(
    @graphql.Args() args: MetasFitnesFindUniqueArgs
  ): Promise<MetasFitnes | null> {
    const result = await this.service.metasFitnes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MetasFitnes)
  async createMetasFitnes(
    @graphql.Args() args: CreateMetasFitnesArgs
  ): Promise<MetasFitnes> {
    return await this.service.createMetasFitnes({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MetasFitnes)
  async updateMetasFitnes(
    @graphql.Args() args: UpdateMetasFitnesArgs
  ): Promise<MetasFitnes | null> {
    try {
      return await this.service.updateMetasFitnes({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MetasFitnes)
  async deleteMetasFitnes(
    @graphql.Args() args: DeleteMetasFitnesArgs
  ): Promise<MetasFitnes | null> {
    try {
      return await this.service.deleteMetasFitnes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: MetasFitnes
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
