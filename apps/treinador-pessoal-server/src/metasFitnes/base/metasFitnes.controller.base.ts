/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MetasFitnesService } from "../metasFitnes.service";
import { MetasFitnesCreateInput } from "./MetasFitnesCreateInput";
import { MetasFitnes } from "./MetasFitnes";
import { MetasFitnesFindManyArgs } from "./MetasFitnesFindManyArgs";
import { MetasFitnesWhereUniqueInput } from "./MetasFitnesWhereUniqueInput";
import { MetasFitnesUpdateInput } from "./MetasFitnesUpdateInput";

export class MetasFitnesControllerBase {
  constructor(protected readonly service: MetasFitnesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MetasFitnes })
  async createMetasFitnes(
    @common.Body() data: MetasFitnesCreateInput
  ): Promise<MetasFitnes> {
    return await this.service.createMetasFitnes({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        metaDeCurtoPrazo: true,
        metaDeLongoPrazo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MetasFitnes] })
  @ApiNestedQuery(MetasFitnesFindManyArgs)
  async metasFitnesItems(
    @common.Req() request: Request
  ): Promise<MetasFitnes[]> {
    const args = plainToClass(MetasFitnesFindManyArgs, request.query);
    return this.service.metasFitnesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        metaDeCurtoPrazo: true,
        metaDeLongoPrazo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MetasFitnes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async metasFitnes(
    @common.Param() params: MetasFitnesWhereUniqueInput
  ): Promise<MetasFitnes | null> {
    const result = await this.service.metasFitnes({
      where: params,
      select: {
        createdAt: true,
        id: true,
        metaDeCurtoPrazo: true,
        metaDeLongoPrazo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MetasFitnes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMetasFitnes(
    @common.Param() params: MetasFitnesWhereUniqueInput,
    @common.Body() data: MetasFitnesUpdateInput
  ): Promise<MetasFitnes | null> {
    try {
      return await this.service.updateMetasFitnes({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          metaDeCurtoPrazo: true,
          metaDeLongoPrazo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MetasFitnes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMetasFitnes(
    @common.Param() params: MetasFitnesWhereUniqueInput
  ): Promise<MetasFitnes | null> {
    try {
      return await this.service.deleteMetasFitnes({
        where: params,
        select: {
          createdAt: true,
          id: true,
          metaDeCurtoPrazo: true,
          metaDeLongoPrazo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
