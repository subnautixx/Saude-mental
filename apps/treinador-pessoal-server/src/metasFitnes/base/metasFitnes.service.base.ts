/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MetasFitnes as PrismaMetasFitnes,
  UsuRio as PrismaUsuRio,
} from "@prisma/client";

export class MetasFitnesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MetasFitnesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.metasFitnes.count(args);
  }

  async metasFitnesItems<T extends Prisma.MetasFitnesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MetasFitnesFindManyArgs>
  ): Promise<PrismaMetasFitnes[]> {
    return this.prisma.metasFitnes.findMany<Prisma.MetasFitnesFindManyArgs>(
      args
    );
  }
  async metasFitnes<T extends Prisma.MetasFitnesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MetasFitnesFindUniqueArgs>
  ): Promise<PrismaMetasFitnes | null> {
    return this.prisma.metasFitnes.findUnique(args);
  }
  async createMetasFitnes<T extends Prisma.MetasFitnesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MetasFitnesCreateArgs>
  ): Promise<PrismaMetasFitnes> {
    return this.prisma.metasFitnes.create<T>(args);
  }
  async updateMetasFitnes<T extends Prisma.MetasFitnesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MetasFitnesUpdateArgs>
  ): Promise<PrismaMetasFitnes> {
    return this.prisma.metasFitnes.update<T>(args);
  }
  async deleteMetasFitnes<T extends Prisma.MetasFitnesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MetasFitnesDeleteArgs>
  ): Promise<PrismaMetasFitnes> {
    return this.prisma.metasFitnes.delete(args);
  }

  async getUsuRio(parentId: string): Promise<PrismaUsuRio | null> {
    return this.prisma.metasFitnes
      .findUnique({
        where: { id: parentId },
      })
      .usuRio();
  }
}
