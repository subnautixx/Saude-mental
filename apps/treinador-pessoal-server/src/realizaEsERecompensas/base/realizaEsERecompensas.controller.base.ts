/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RealizaEsERecompensasService } from "../realizaEsERecompensas.service";
import { RealizaEsERecompensasCreateInput } from "./RealizaEsERecompensasCreateInput";
import { RealizaEsERecompensas } from "./RealizaEsERecompensas";
import { RealizaEsERecompensasFindManyArgs } from "./RealizaEsERecompensasFindManyArgs";
import { RealizaEsERecompensasWhereUniqueInput } from "./RealizaEsERecompensasWhereUniqueInput";
import { RealizaEsERecompensasUpdateInput } from "./RealizaEsERecompensasUpdateInput";

export class RealizaEsERecompensasControllerBase {
  constructor(protected readonly service: RealizaEsERecompensasService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RealizaEsERecompensas })
  async createRealizaEsERecompensas(
    @common.Body() data: RealizaEsERecompensasCreateInput
  ): Promise<RealizaEsERecompensas> {
    return await this.service.createRealizaEsERecompensas({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        realizaO: true,
        recompensa: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RealizaEsERecompensas] })
  @ApiNestedQuery(RealizaEsERecompensasFindManyArgs)
  async realizaEsERecompensasItems(
    @common.Req() request: Request
  ): Promise<RealizaEsERecompensas[]> {
    const args = plainToClass(RealizaEsERecompensasFindManyArgs, request.query);
    return this.service.realizaEsERecompensasItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        realizaO: true,
        recompensa: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RealizaEsERecompensas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async realizaEsERecompensas(
    @common.Param() params: RealizaEsERecompensasWhereUniqueInput
  ): Promise<RealizaEsERecompensas | null> {
    const result = await this.service.realizaEsERecompensas({
      where: params,
      select: {
        createdAt: true,
        id: true,
        realizaO: true,
        recompensa: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RealizaEsERecompensas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRealizaEsERecompensas(
    @common.Param() params: RealizaEsERecompensasWhereUniqueInput,
    @common.Body() data: RealizaEsERecompensasUpdateInput
  ): Promise<RealizaEsERecompensas | null> {
    try {
      return await this.service.updateRealizaEsERecompensas({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          realizaO: true,
          recompensa: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RealizaEsERecompensas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRealizaEsERecompensas(
    @common.Param() params: RealizaEsERecompensasWhereUniqueInput
  ): Promise<RealizaEsERecompensas | null> {
    try {
      return await this.service.deleteRealizaEsERecompensas({
        where: params,
        select: {
          createdAt: true,
          id: true,
          realizaO: true,
          recompensa: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
