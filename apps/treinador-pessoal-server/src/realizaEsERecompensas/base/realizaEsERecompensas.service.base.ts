/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RealizaEsERecompensas as PrismaRealizaEsERecompensas,
  UsuRio as PrismaUsuRio,
} from "@prisma/client";

export class RealizaEsERecompensasServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RealizaEsERecompensasCountArgs, "select">
  ): Promise<number> {
    return this.prisma.realizaEsERecompensas.count(args);
  }

  async realizaEsERecompensasItems<
    T extends Prisma.RealizaEsERecompensasFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RealizaEsERecompensasFindManyArgs>
  ): Promise<PrismaRealizaEsERecompensas[]> {
    return this.prisma.realizaEsERecompensas.findMany<Prisma.RealizaEsERecompensasFindManyArgs>(
      args
    );
  }
  async realizaEsERecompensas<
    T extends Prisma.RealizaEsERecompensasFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RealizaEsERecompensasFindUniqueArgs>
  ): Promise<PrismaRealizaEsERecompensas | null> {
    return this.prisma.realizaEsERecompensas.findUnique(args);
  }
  async createRealizaEsERecompensas<
    T extends Prisma.RealizaEsERecompensasCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RealizaEsERecompensasCreateArgs>
  ): Promise<PrismaRealizaEsERecompensas> {
    return this.prisma.realizaEsERecompensas.create<T>(args);
  }
  async updateRealizaEsERecompensas<
    T extends Prisma.RealizaEsERecompensasUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RealizaEsERecompensasUpdateArgs>
  ): Promise<PrismaRealizaEsERecompensas> {
    return this.prisma.realizaEsERecompensas.update<T>(args);
  }
  async deleteRealizaEsERecompensas<
    T extends Prisma.RealizaEsERecompensasDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RealizaEsERecompensasDeleteArgs>
  ): Promise<PrismaRealizaEsERecompensas> {
    return this.prisma.realizaEsERecompensas.delete(args);
  }

  async getUsuRio(parentId: string): Promise<PrismaUsuRio | null> {
    return this.prisma.realizaEsERecompensas
      .findUnique({
        where: { id: parentId },
      })
      .usuRio();
  }
}
