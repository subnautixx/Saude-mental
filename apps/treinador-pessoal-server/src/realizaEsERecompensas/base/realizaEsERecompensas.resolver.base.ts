/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RealizaEsERecompensas } from "./RealizaEsERecompensas";
import { RealizaEsERecompensasCountArgs } from "./RealizaEsERecompensasCountArgs";
import { RealizaEsERecompensasFindManyArgs } from "./RealizaEsERecompensasFindManyArgs";
import { RealizaEsERecompensasFindUniqueArgs } from "./RealizaEsERecompensasFindUniqueArgs";
import { CreateRealizaEsERecompensasArgs } from "./CreateRealizaEsERecompensasArgs";
import { UpdateRealizaEsERecompensasArgs } from "./UpdateRealizaEsERecompensasArgs";
import { DeleteRealizaEsERecompensasArgs } from "./DeleteRealizaEsERecompensasArgs";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { RealizaEsERecompensasService } from "../realizaEsERecompensas.service";
@graphql.Resolver(() => RealizaEsERecompensas)
export class RealizaEsERecompensasResolverBase {
  constructor(protected readonly service: RealizaEsERecompensasService) {}

  async _realizaEsERecompensasItemsMeta(
    @graphql.Args() args: RealizaEsERecompensasCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RealizaEsERecompensas])
  async realizaEsERecompensasItems(
    @graphql.Args() args: RealizaEsERecompensasFindManyArgs
  ): Promise<RealizaEsERecompensas[]> {
    return this.service.realizaEsERecompensasItems(args);
  }

  @graphql.Query(() => RealizaEsERecompensas, { nullable: true })
  async realizaEsERecompensas(
    @graphql.Args() args: RealizaEsERecompensasFindUniqueArgs
  ): Promise<RealizaEsERecompensas | null> {
    const result = await this.service.realizaEsERecompensas(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RealizaEsERecompensas)
  async createRealizaEsERecompensas(
    @graphql.Args() args: CreateRealizaEsERecompensasArgs
  ): Promise<RealizaEsERecompensas> {
    return await this.service.createRealizaEsERecompensas({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RealizaEsERecompensas)
  async updateRealizaEsERecompensas(
    @graphql.Args() args: UpdateRealizaEsERecompensasArgs
  ): Promise<RealizaEsERecompensas | null> {
    try {
      return await this.service.updateRealizaEsERecompensas({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RealizaEsERecompensas)
  async deleteRealizaEsERecompensas(
    @graphql.Args() args: DeleteRealizaEsERecompensasArgs
  ): Promise<RealizaEsERecompensas | null> {
    try {
      return await this.service.deleteRealizaEsERecompensas(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: RealizaEsERecompensas
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
