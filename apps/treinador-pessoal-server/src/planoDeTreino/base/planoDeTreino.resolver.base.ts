/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PlanoDeTreino } from "./PlanoDeTreino";
import { PlanoDeTreinoCountArgs } from "./PlanoDeTreinoCountArgs";
import { PlanoDeTreinoFindManyArgs } from "./PlanoDeTreinoFindManyArgs";
import { PlanoDeTreinoFindUniqueArgs } from "./PlanoDeTreinoFindUniqueArgs";
import { CreatePlanoDeTreinoArgs } from "./CreatePlanoDeTreinoArgs";
import { UpdatePlanoDeTreinoArgs } from "./UpdatePlanoDeTreinoArgs";
import { DeletePlanoDeTreinoArgs } from "./DeletePlanoDeTreinoArgs";
import { ExercCioFindManyArgs } from "../../exercCio/base/ExercCioFindManyArgs";
import { ExercCio } from "../../exercCio/base/ExercCio";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { PlanoDeTreinoService } from "../planoDeTreino.service";
@graphql.Resolver(() => PlanoDeTreino)
export class PlanoDeTreinoResolverBase {
  constructor(protected readonly service: PlanoDeTreinoService) {}

  async _planoDeTreinosMeta(
    @graphql.Args() args: PlanoDeTreinoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PlanoDeTreino])
  async planoDeTreinos(
    @graphql.Args() args: PlanoDeTreinoFindManyArgs
  ): Promise<PlanoDeTreino[]> {
    return this.service.planoDeTreinos(args);
  }

  @graphql.Query(() => PlanoDeTreino, { nullable: true })
  async planoDeTreino(
    @graphql.Args() args: PlanoDeTreinoFindUniqueArgs
  ): Promise<PlanoDeTreino | null> {
    const result = await this.service.planoDeTreino(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlanoDeTreino)
  async createPlanoDeTreino(
    @graphql.Args() args: CreatePlanoDeTreinoArgs
  ): Promise<PlanoDeTreino> {
    return await this.service.createPlanoDeTreino({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PlanoDeTreino)
  async updatePlanoDeTreino(
    @graphql.Args() args: UpdatePlanoDeTreinoArgs
  ): Promise<PlanoDeTreino | null> {
    try {
      return await this.service.updatePlanoDeTreino({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlanoDeTreino)
  async deletePlanoDeTreino(
    @graphql.Args() args: DeletePlanoDeTreinoArgs
  ): Promise<PlanoDeTreino | null> {
    try {
      return await this.service.deletePlanoDeTreino(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ExercCio], { name: "exercCios" })
  async findExercCios(
    @graphql.Parent() parent: PlanoDeTreino,
    @graphql.Args() args: ExercCioFindManyArgs
  ): Promise<ExercCio[]> {
    const results = await this.service.findExercCios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: PlanoDeTreino
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
