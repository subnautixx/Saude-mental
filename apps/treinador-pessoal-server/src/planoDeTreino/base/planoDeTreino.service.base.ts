/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlanoDeTreino as PrismaPlanoDeTreino,
  ExercCio as PrismaExercCio,
  UsuRio as PrismaUsuRio,
} from "@prisma/client";

export class PlanoDeTreinoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlanoDeTreinoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.planoDeTreino.count(args);
  }

  async planoDeTreinos<T extends Prisma.PlanoDeTreinoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlanoDeTreinoFindManyArgs>
  ): Promise<PrismaPlanoDeTreino[]> {
    return this.prisma.planoDeTreino.findMany<Prisma.PlanoDeTreinoFindManyArgs>(
      args
    );
  }
  async planoDeTreino<T extends Prisma.PlanoDeTreinoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlanoDeTreinoFindUniqueArgs>
  ): Promise<PrismaPlanoDeTreino | null> {
    return this.prisma.planoDeTreino.findUnique(args);
  }
  async createPlanoDeTreino<T extends Prisma.PlanoDeTreinoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlanoDeTreinoCreateArgs>
  ): Promise<PrismaPlanoDeTreino> {
    return this.prisma.planoDeTreino.create<T>(args);
  }
  async updatePlanoDeTreino<T extends Prisma.PlanoDeTreinoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlanoDeTreinoUpdateArgs>
  ): Promise<PrismaPlanoDeTreino> {
    return this.prisma.planoDeTreino.update<T>(args);
  }
  async deletePlanoDeTreino<T extends Prisma.PlanoDeTreinoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlanoDeTreinoDeleteArgs>
  ): Promise<PrismaPlanoDeTreino> {
    return this.prisma.planoDeTreino.delete(args);
  }

  async findExercCios(
    parentId: string,
    args: Prisma.ExercCioFindManyArgs
  ): Promise<PrismaExercCio[]> {
    return this.prisma.planoDeTreino
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .exercCios(args);
  }

  async getUsuRio(parentId: string): Promise<PrismaUsuRio | null> {
    return this.prisma.planoDeTreino
      .findUnique({
        where: { id: parentId },
      })
      .usuRio();
  }
}
