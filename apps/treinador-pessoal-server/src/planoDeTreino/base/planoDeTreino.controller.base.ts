/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlanoDeTreinoService } from "../planoDeTreino.service";
import { PlanoDeTreinoCreateInput } from "./PlanoDeTreinoCreateInput";
import { PlanoDeTreino } from "./PlanoDeTreino";
import { PlanoDeTreinoFindManyArgs } from "./PlanoDeTreinoFindManyArgs";
import { PlanoDeTreinoWhereUniqueInput } from "./PlanoDeTreinoWhereUniqueInput";
import { PlanoDeTreinoUpdateInput } from "./PlanoDeTreinoUpdateInput";
import { ExercCioFindManyArgs } from "../../exercCio/base/ExercCioFindManyArgs";
import { ExercCio } from "../../exercCio/base/ExercCio";
import { ExercCioWhereUniqueInput } from "../../exercCio/base/ExercCioWhereUniqueInput";

export class PlanoDeTreinoControllerBase {
  constructor(protected readonly service: PlanoDeTreinoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlanoDeTreino })
  async createPlanoDeTreino(
    @common.Body() data: PlanoDeTreinoCreateInput
  ): Promise<PlanoDeTreino> {
    return await this.service.createPlanoDeTreino({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        descriO: true,
        duraOSemanas: true,
        id: true,
        tTulo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlanoDeTreino] })
  @ApiNestedQuery(PlanoDeTreinoFindManyArgs)
  async planoDeTreinos(
    @common.Req() request: Request
  ): Promise<PlanoDeTreino[]> {
    const args = plainToClass(PlanoDeTreinoFindManyArgs, request.query);
    return this.service.planoDeTreinos({
      ...args,
      select: {
        createdAt: true,
        descriO: true,
        duraOSemanas: true,
        id: true,
        tTulo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlanoDeTreino })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async planoDeTreino(
    @common.Param() params: PlanoDeTreinoWhereUniqueInput
  ): Promise<PlanoDeTreino | null> {
    const result = await this.service.planoDeTreino({
      where: params,
      select: {
        createdAt: true,
        descriO: true,
        duraOSemanas: true,
        id: true,
        tTulo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlanoDeTreino })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlanoDeTreino(
    @common.Param() params: PlanoDeTreinoWhereUniqueInput,
    @common.Body() data: PlanoDeTreinoUpdateInput
  ): Promise<PlanoDeTreino | null> {
    try {
      return await this.service.updatePlanoDeTreino({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          descriO: true,
          duraOSemanas: true,
          id: true,
          tTulo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlanoDeTreino })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlanoDeTreino(
    @common.Param() params: PlanoDeTreinoWhereUniqueInput
  ): Promise<PlanoDeTreino | null> {
    try {
      return await this.service.deletePlanoDeTreino({
        where: params,
        select: {
          createdAt: true,
          descriO: true,
          duraOSemanas: true,
          id: true,
          tTulo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/exercCios")
  @ApiNestedQuery(ExercCioFindManyArgs)
  async findExercCios(
    @common.Req() request: Request,
    @common.Param() params: PlanoDeTreinoWhereUniqueInput
  ): Promise<ExercCio[]> {
    const query = plainToClass(ExercCioFindManyArgs, request.query);
    const results = await this.service.findExercCios(params.id, {
      ...query,
      select: {
        createdAt: true,
        duraOMinutos: true,
        id: true,
        nome: true,

        planoDeTreino: {
          select: {
            id: true,
          },
        },

        tipo: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/exercCios")
  async connectExercCios(
    @common.Param() params: PlanoDeTreinoWhereUniqueInput,
    @common.Body() body: ExercCioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exercCios: {
        connect: body,
      },
    };
    await this.service.updatePlanoDeTreino({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/exercCios")
  async updateExercCios(
    @common.Param() params: PlanoDeTreinoWhereUniqueInput,
    @common.Body() body: ExercCioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exercCios: {
        set: body,
      },
    };
    await this.service.updatePlanoDeTreino({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/exercCios")
  async disconnectExercCios(
    @common.Param() params: PlanoDeTreinoWhereUniqueInput,
    @common.Body() body: ExercCioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exercCios: {
        disconnect: body,
      },
    };
    await this.service.updatePlanoDeTreino({
      where: params,
      data,
      select: { id: true },
    });
  }
}
