/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecursoAdicionalService } from "../recursoAdicional.service";
import { RecursoAdicionalCreateInput } from "./RecursoAdicionalCreateInput";
import { RecursoAdicional } from "./RecursoAdicional";
import { RecursoAdicionalFindManyArgs } from "./RecursoAdicionalFindManyArgs";
import { RecursoAdicionalWhereUniqueInput } from "./RecursoAdicionalWhereUniqueInput";
import { RecursoAdicionalUpdateInput } from "./RecursoAdicionalUpdateInput";

export class RecursoAdicionalControllerBase {
  constructor(protected readonly service: RecursoAdicionalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecursoAdicional })
  async createRecursoAdicional(
    @common.Body() data: RecursoAdicionalCreateInput
  ): Promise<RecursoAdicional> {
    return await this.service.createRecursoAdicional({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        descriO: true,
        id: true,
        link: true,
        nomeDoRecurso: true,
        tipoDeRecurso: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecursoAdicional] })
  @ApiNestedQuery(RecursoAdicionalFindManyArgs)
  async recursoAdicionals(
    @common.Req() request: Request
  ): Promise<RecursoAdicional[]> {
    const args = plainToClass(RecursoAdicionalFindManyArgs, request.query);
    return this.service.recursoAdicionals({
      ...args,
      select: {
        createdAt: true,
        descriO: true,
        id: true,
        link: true,
        nomeDoRecurso: true,
        tipoDeRecurso: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecursoAdicional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recursoAdicional(
    @common.Param() params: RecursoAdicionalWhereUniqueInput
  ): Promise<RecursoAdicional | null> {
    const result = await this.service.recursoAdicional({
      where: params,
      select: {
        createdAt: true,
        descriO: true,
        id: true,
        link: true,
        nomeDoRecurso: true,
        tipoDeRecurso: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecursoAdicional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecursoAdicional(
    @common.Param() params: RecursoAdicionalWhereUniqueInput,
    @common.Body() data: RecursoAdicionalUpdateInput
  ): Promise<RecursoAdicional | null> {
    try {
      return await this.service.updateRecursoAdicional({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          descriO: true,
          id: true,
          link: true,
          nomeDoRecurso: true,
          tipoDeRecurso: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecursoAdicional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecursoAdicional(
    @common.Param() params: RecursoAdicionalWhereUniqueInput
  ): Promise<RecursoAdicional | null> {
    try {
      return await this.service.deleteRecursoAdicional({
        where: params,
        select: {
          createdAt: true,
          descriO: true,
          id: true,
          link: true,
          nomeDoRecurso: true,
          tipoDeRecurso: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
