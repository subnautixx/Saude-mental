/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecursoAdicional } from "./RecursoAdicional";
import { RecursoAdicionalCountArgs } from "./RecursoAdicionalCountArgs";
import { RecursoAdicionalFindManyArgs } from "./RecursoAdicionalFindManyArgs";
import { RecursoAdicionalFindUniqueArgs } from "./RecursoAdicionalFindUniqueArgs";
import { CreateRecursoAdicionalArgs } from "./CreateRecursoAdicionalArgs";
import { UpdateRecursoAdicionalArgs } from "./UpdateRecursoAdicionalArgs";
import { DeleteRecursoAdicionalArgs } from "./DeleteRecursoAdicionalArgs";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { RecursoAdicionalService } from "../recursoAdicional.service";
@graphql.Resolver(() => RecursoAdicional)
export class RecursoAdicionalResolverBase {
  constructor(protected readonly service: RecursoAdicionalService) {}

  async _recursoAdicionalsMeta(
    @graphql.Args() args: RecursoAdicionalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecursoAdicional])
  async recursoAdicionals(
    @graphql.Args() args: RecursoAdicionalFindManyArgs
  ): Promise<RecursoAdicional[]> {
    return this.service.recursoAdicionals(args);
  }

  @graphql.Query(() => RecursoAdicional, { nullable: true })
  async recursoAdicional(
    @graphql.Args() args: RecursoAdicionalFindUniqueArgs
  ): Promise<RecursoAdicional | null> {
    const result = await this.service.recursoAdicional(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecursoAdicional)
  async createRecursoAdicional(
    @graphql.Args() args: CreateRecursoAdicionalArgs
  ): Promise<RecursoAdicional> {
    return await this.service.createRecursoAdicional({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RecursoAdicional)
  async updateRecursoAdicional(
    @graphql.Args() args: UpdateRecursoAdicionalArgs
  ): Promise<RecursoAdicional | null> {
    try {
      return await this.service.updateRecursoAdicional({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecursoAdicional)
  async deleteRecursoAdicional(
    @graphql.Args() args: DeleteRecursoAdicionalArgs
  ): Promise<RecursoAdicional | null> {
    try {
      return await this.service.deleteRecursoAdicional(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: RecursoAdicional
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
