/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SessODeMeditaOGuiadaService } from "../sessODeMeditaOGuiada.service";
import { SessODeMeditaOGuiadaCreateInput } from "./SessODeMeditaOGuiadaCreateInput";
import { SessODeMeditaOGuiada } from "./SessODeMeditaOGuiada";
import { SessODeMeditaOGuiadaFindManyArgs } from "./SessODeMeditaOGuiadaFindManyArgs";
import { SessODeMeditaOGuiadaWhereUniqueInput } from "./SessODeMeditaOGuiadaWhereUniqueInput";
import { SessODeMeditaOGuiadaUpdateInput } from "./SessODeMeditaOGuiadaUpdateInput";

export class SessODeMeditaOGuiadaControllerBase {
  constructor(protected readonly service: SessODeMeditaOGuiadaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SessODeMeditaOGuiada })
  async createSessODeMeditaOGuiada(
    @common.Body() data: SessODeMeditaOGuiadaCreateInput
  ): Promise<SessODeMeditaOGuiada> {
    return await this.service.createSessODeMeditaOGuiada({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        duraO: true,
        id: true,
        nome: true,
        objetivo: true,
        tipo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SessODeMeditaOGuiada] })
  @ApiNestedQuery(SessODeMeditaOGuiadaFindManyArgs)
  async sessODeMeditaOGuiadas(
    @common.Req() request: Request
  ): Promise<SessODeMeditaOGuiada[]> {
    const args = plainToClass(SessODeMeditaOGuiadaFindManyArgs, request.query);
    return this.service.sessODeMeditaOGuiadas({
      ...args,
      select: {
        createdAt: true,
        duraO: true,
        id: true,
        nome: true,
        objetivo: true,
        tipo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SessODeMeditaOGuiada })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sessODeMeditaOGuiada(
    @common.Param() params: SessODeMeditaOGuiadaWhereUniqueInput
  ): Promise<SessODeMeditaOGuiada | null> {
    const result = await this.service.sessODeMeditaOGuiada({
      where: params,
      select: {
        createdAt: true,
        duraO: true,
        id: true,
        nome: true,
        objetivo: true,
        tipo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SessODeMeditaOGuiada })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSessODeMeditaOGuiada(
    @common.Param() params: SessODeMeditaOGuiadaWhereUniqueInput,
    @common.Body() data: SessODeMeditaOGuiadaUpdateInput
  ): Promise<SessODeMeditaOGuiada | null> {
    try {
      return await this.service.updateSessODeMeditaOGuiada({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          duraO: true,
          id: true,
          nome: true,
          objetivo: true,
          tipo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SessODeMeditaOGuiada })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSessODeMeditaOGuiada(
    @common.Param() params: SessODeMeditaOGuiadaWhereUniqueInput
  ): Promise<SessODeMeditaOGuiada | null> {
    try {
      return await this.service.deleteSessODeMeditaOGuiada({
        where: params,
        select: {
          createdAt: true,
          duraO: true,
          id: true,
          nome: true,
          objetivo: true,
          tipo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
