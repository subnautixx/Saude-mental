/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SessODeMeditaOGuiada } from "./SessODeMeditaOGuiada";
import { SessODeMeditaOGuiadaCountArgs } from "./SessODeMeditaOGuiadaCountArgs";
import { SessODeMeditaOGuiadaFindManyArgs } from "./SessODeMeditaOGuiadaFindManyArgs";
import { SessODeMeditaOGuiadaFindUniqueArgs } from "./SessODeMeditaOGuiadaFindUniqueArgs";
import { CreateSessODeMeditaOGuiadaArgs } from "./CreateSessODeMeditaOGuiadaArgs";
import { UpdateSessODeMeditaOGuiadaArgs } from "./UpdateSessODeMeditaOGuiadaArgs";
import { DeleteSessODeMeditaOGuiadaArgs } from "./DeleteSessODeMeditaOGuiadaArgs";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { SessODeMeditaOGuiadaService } from "../sessODeMeditaOGuiada.service";
@graphql.Resolver(() => SessODeMeditaOGuiada)
export class SessODeMeditaOGuiadaResolverBase {
  constructor(protected readonly service: SessODeMeditaOGuiadaService) {}

  async _sessODeMeditaOGuiadasMeta(
    @graphql.Args() args: SessODeMeditaOGuiadaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SessODeMeditaOGuiada])
  async sessODeMeditaOGuiadas(
    @graphql.Args() args: SessODeMeditaOGuiadaFindManyArgs
  ): Promise<SessODeMeditaOGuiada[]> {
    return this.service.sessODeMeditaOGuiadas(args);
  }

  @graphql.Query(() => SessODeMeditaOGuiada, { nullable: true })
  async sessODeMeditaOGuiada(
    @graphql.Args() args: SessODeMeditaOGuiadaFindUniqueArgs
  ): Promise<SessODeMeditaOGuiada | null> {
    const result = await this.service.sessODeMeditaOGuiada(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SessODeMeditaOGuiada)
  async createSessODeMeditaOGuiada(
    @graphql.Args() args: CreateSessODeMeditaOGuiadaArgs
  ): Promise<SessODeMeditaOGuiada> {
    return await this.service.createSessODeMeditaOGuiada({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SessODeMeditaOGuiada)
  async updateSessODeMeditaOGuiada(
    @graphql.Args() args: UpdateSessODeMeditaOGuiadaArgs
  ): Promise<SessODeMeditaOGuiada | null> {
    try {
      return await this.service.updateSessODeMeditaOGuiada({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SessODeMeditaOGuiada)
  async deleteSessODeMeditaOGuiada(
    @graphql.Args() args: DeleteSessODeMeditaOGuiadaArgs
  ): Promise<SessODeMeditaOGuiada | null> {
    try {
      return await this.service.deleteSessODeMeditaOGuiada(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: SessODeMeditaOGuiada
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
