/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AvaliaOPessoal } from "./AvaliaOPessoal";
import { AvaliaOPessoalCountArgs } from "./AvaliaOPessoalCountArgs";
import { AvaliaOPessoalFindManyArgs } from "./AvaliaOPessoalFindManyArgs";
import { AvaliaOPessoalFindUniqueArgs } from "./AvaliaOPessoalFindUniqueArgs";
import { CreateAvaliaOPessoalArgs } from "./CreateAvaliaOPessoalArgs";
import { UpdateAvaliaOPessoalArgs } from "./UpdateAvaliaOPessoalArgs";
import { DeleteAvaliaOPessoalArgs } from "./DeleteAvaliaOPessoalArgs";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { AvaliaOPessoalService } from "../avaliaOPessoal.service";
@graphql.Resolver(() => AvaliaOPessoal)
export class AvaliaOPessoalResolverBase {
  constructor(protected readonly service: AvaliaOPessoalService) {}

  async _avaliaOPessoalsMeta(
    @graphql.Args() args: AvaliaOPessoalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AvaliaOPessoal])
  async avaliaOPessoals(
    @graphql.Args() args: AvaliaOPessoalFindManyArgs
  ): Promise<AvaliaOPessoal[]> {
    return this.service.avaliaOPessoals(args);
  }

  @graphql.Query(() => AvaliaOPessoal, { nullable: true })
  async avaliaOPessoal(
    @graphql.Args() args: AvaliaOPessoalFindUniqueArgs
  ): Promise<AvaliaOPessoal | null> {
    const result = await this.service.avaliaOPessoal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AvaliaOPessoal)
  async createAvaliaOPessoal(
    @graphql.Args() args: CreateAvaliaOPessoalArgs
  ): Promise<AvaliaOPessoal> {
    return await this.service.createAvaliaOPessoal({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AvaliaOPessoal)
  async updateAvaliaOPessoal(
    @graphql.Args() args: UpdateAvaliaOPessoalArgs
  ): Promise<AvaliaOPessoal | null> {
    try {
      return await this.service.updateAvaliaOPessoal({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AvaliaOPessoal)
  async deleteAvaliaOPessoal(
    @graphql.Args() args: DeleteAvaliaOPessoalArgs
  ): Promise<AvaliaOPessoal | null> {
    try {
      return await this.service.deleteAvaliaOPessoal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: AvaliaOPessoal
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
