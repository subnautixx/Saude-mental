/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AvaliaOPessoal as PrismaAvaliaOPessoal,
  UsuRio as PrismaUsuRio,
} from "@prisma/client";

export class AvaliaOPessoalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AvaliaOPessoalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.avaliaOPessoal.count(args);
  }

  async avaliaOPessoals<T extends Prisma.AvaliaOPessoalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AvaliaOPessoalFindManyArgs>
  ): Promise<PrismaAvaliaOPessoal[]> {
    return this.prisma.avaliaOPessoal.findMany<Prisma.AvaliaOPessoalFindManyArgs>(
      args
    );
  }
  async avaliaOPessoal<T extends Prisma.AvaliaOPessoalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AvaliaOPessoalFindUniqueArgs>
  ): Promise<PrismaAvaliaOPessoal | null> {
    return this.prisma.avaliaOPessoal.findUnique(args);
  }
  async createAvaliaOPessoal<T extends Prisma.AvaliaOPessoalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AvaliaOPessoalCreateArgs>
  ): Promise<PrismaAvaliaOPessoal> {
    return this.prisma.avaliaOPessoal.create<T>(args);
  }
  async updateAvaliaOPessoal<T extends Prisma.AvaliaOPessoalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AvaliaOPessoalUpdateArgs>
  ): Promise<PrismaAvaliaOPessoal> {
    return this.prisma.avaliaOPessoal.update<T>(args);
  }
  async deleteAvaliaOPessoal<T extends Prisma.AvaliaOPessoalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AvaliaOPessoalDeleteArgs>
  ): Promise<PrismaAvaliaOPessoal> {
    return this.prisma.avaliaOPessoal.delete(args);
  }

  async getUsuRio(parentId: string): Promise<PrismaUsuRio | null> {
    return this.prisma.avaliaOPessoal
      .findUnique({
        where: { id: parentId },
      })
      .usuRio();
  }
}
