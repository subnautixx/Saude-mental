/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AvaliaOPessoalService } from "../avaliaOPessoal.service";
import { AvaliaOPessoalCreateInput } from "./AvaliaOPessoalCreateInput";
import { AvaliaOPessoal } from "./AvaliaOPessoal";
import { AvaliaOPessoalFindManyArgs } from "./AvaliaOPessoalFindManyArgs";
import { AvaliaOPessoalWhereUniqueInput } from "./AvaliaOPessoalWhereUniqueInput";
import { AvaliaOPessoalUpdateInput } from "./AvaliaOPessoalUpdateInput";

export class AvaliaOPessoalControllerBase {
  constructor(protected readonly service: AvaliaOPessoalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AvaliaOPessoal })
  async createAvaliaOPessoal(
    @common.Body() data: AvaliaOPessoalCreateInput
  ): Promise<AvaliaOPessoal> {
    return await this.service.createAvaliaOPessoal({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        avaliaOMentalRegular: true,
        checkInsDiRios: true,
        conteDoPersonalizado: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AvaliaOPessoal] })
  @ApiNestedQuery(AvaliaOPessoalFindManyArgs)
  async avaliaOPessoals(
    @common.Req() request: Request
  ): Promise<AvaliaOPessoal[]> {
    const args = plainToClass(AvaliaOPessoalFindManyArgs, request.query);
    return this.service.avaliaOPessoals({
      ...args,
      select: {
        avaliaOMentalRegular: true,
        checkInsDiRios: true,
        conteDoPersonalizado: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AvaliaOPessoal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async avaliaOPessoal(
    @common.Param() params: AvaliaOPessoalWhereUniqueInput
  ): Promise<AvaliaOPessoal | null> {
    const result = await this.service.avaliaOPessoal({
      where: params,
      select: {
        avaliaOMentalRegular: true,
        checkInsDiRios: true,
        conteDoPersonalizado: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AvaliaOPessoal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAvaliaOPessoal(
    @common.Param() params: AvaliaOPessoalWhereUniqueInput,
    @common.Body() data: AvaliaOPessoalUpdateInput
  ): Promise<AvaliaOPessoal | null> {
    try {
      return await this.service.updateAvaliaOPessoal({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          avaliaOMentalRegular: true,
          checkInsDiRios: true,
          conteDoPersonalizado: true,
          createdAt: true,
          id: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AvaliaOPessoal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAvaliaOPessoal(
    @common.Param() params: AvaliaOPessoalWhereUniqueInput
  ): Promise<AvaliaOPessoal | null> {
    try {
      return await this.service.deleteAvaliaOPessoal({
        where: params,
        select: {
          avaliaOMentalRegular: true,
          checkInsDiRios: true,
          conteDoPersonalizado: true,
          createdAt: true,
          id: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
