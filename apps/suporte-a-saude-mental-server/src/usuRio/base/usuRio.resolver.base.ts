/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UsuRio } from "./UsuRio";
import { UsuRioCountArgs } from "./UsuRioCountArgs";
import { UsuRioFindManyArgs } from "./UsuRioFindManyArgs";
import { UsuRioFindUniqueArgs } from "./UsuRioFindUniqueArgs";
import { CreateUsuRioArgs } from "./CreateUsuRioArgs";
import { UpdateUsuRioArgs } from "./UpdateUsuRioArgs";
import { DeleteUsuRioArgs } from "./DeleteUsuRioArgs";
import { AvaliaOPessoalFindManyArgs } from "../../avaliaOPessoal/base/AvaliaOPessoalFindManyArgs";
import { AvaliaOPessoal } from "../../avaliaOPessoal/base/AvaliaOPessoal";
import { MeditaOFindManyArgs } from "../../meditaO/base/MeditaOFindManyArgs";
import { MeditaO } from "../../meditaO/base/MeditaO";
import { RecomendaOFindManyArgs } from "../../recomendaO/base/RecomendaOFindManyArgs";
import { RecomendaO } from "../../recomendaO/base/RecomendaO";
import { RecursoAdicionalFindManyArgs } from "../../recursoAdicional/base/RecursoAdicionalFindManyArgs";
import { RecursoAdicional } from "../../recursoAdicional/base/RecursoAdicional";
import { SessODeMeditaOGuiadaFindManyArgs } from "../../sessODeMeditaOGuiada/base/SessODeMeditaOGuiadaFindManyArgs";
import { SessODeMeditaOGuiada } from "../../sessODeMeditaOGuiada/base/SessODeMeditaOGuiada";
import { SessODeTerapiaFindManyArgs } from "../../sessODeTerapia/base/SessODeTerapiaFindManyArgs";
import { SessODeTerapia } from "../../sessODeTerapia/base/SessODeTerapia";
import { UsuRioService } from "../usuRio.service";
@graphql.Resolver(() => UsuRio)
export class UsuRioResolverBase {
  constructor(protected readonly service: UsuRioService) {}

  async _usuRiosMeta(
    @graphql.Args() args: UsuRioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UsuRio])
  async usuRios(@graphql.Args() args: UsuRioFindManyArgs): Promise<UsuRio[]> {
    return this.service.usuRios(args);
  }

  @graphql.Query(() => UsuRio, { nullable: true })
  async usuRio(
    @graphql.Args() args: UsuRioFindUniqueArgs
  ): Promise<UsuRio | null> {
    const result = await this.service.usuRio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UsuRio)
  async createUsuRio(@graphql.Args() args: CreateUsuRioArgs): Promise<UsuRio> {
    return await this.service.createUsuRio({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UsuRio)
  async updateUsuRio(
    @graphql.Args() args: UpdateUsuRioArgs
  ): Promise<UsuRio | null> {
    try {
      return await this.service.updateUsuRio({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsuRio)
  async deleteUsuRio(
    @graphql.Args() args: DeleteUsuRioArgs
  ): Promise<UsuRio | null> {
    try {
      return await this.service.deleteUsuRio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AvaliaOPessoal], { name: "avaliaOPessoals" })
  async findAvaliaOPessoals(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: AvaliaOPessoalFindManyArgs
  ): Promise<AvaliaOPessoal[]> {
    const results = await this.service.findAvaliaOPessoals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [MeditaO], { name: "meditaOs" })
  async findMeditaOs(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: MeditaOFindManyArgs
  ): Promise<MeditaO[]> {
    const results = await this.service.findMeditaOs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RecomendaO], { name: "recomendaOs" })
  async findRecomendaOs(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: RecomendaOFindManyArgs
  ): Promise<RecomendaO[]> {
    const results = await this.service.findRecomendaOs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [RecursoAdicional], { name: "recursoAdicionals" })
  async findRecursoAdicionals(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: RecursoAdicionalFindManyArgs
  ): Promise<RecursoAdicional[]> {
    const results = await this.service.findRecursoAdicionals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SessODeMeditaOGuiada], {
    name: "sessODeMeditaOGuiadas",
  })
  async findSessODeMeditaOGuiadas(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: SessODeMeditaOGuiadaFindManyArgs
  ): Promise<SessODeMeditaOGuiada[]> {
    const results = await this.service.findSessODeMeditaOGuiadas(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SessODeTerapia], { name: "sessODeTerapias" })
  async findSessODeTerapias(
    @graphql.Parent() parent: UsuRio,
    @graphql.Args() args: SessODeTerapiaFindManyArgs
  ): Promise<SessODeTerapia[]> {
    const results = await this.service.findSessODeTerapias(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
