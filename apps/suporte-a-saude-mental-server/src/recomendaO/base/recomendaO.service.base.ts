/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RecomendaO as PrismaRecomendaO,
  UsuRio as PrismaUsuRio,
} from "@prisma/client";

export class RecomendaOServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecomendaOCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recomendaO.count(args);
  }

  async recomendaOS<T extends Prisma.RecomendaOFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecomendaOFindManyArgs>
  ): Promise<PrismaRecomendaO[]> {
    return this.prisma.recomendaO.findMany<Prisma.RecomendaOFindManyArgs>(args);
  }
  async recomendaO<T extends Prisma.RecomendaOFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecomendaOFindUniqueArgs>
  ): Promise<PrismaRecomendaO | null> {
    return this.prisma.recomendaO.findUnique(args);
  }
  async createRecomendaO<T extends Prisma.RecomendaOCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecomendaOCreateArgs>
  ): Promise<PrismaRecomendaO> {
    return this.prisma.recomendaO.create<T>(args);
  }
  async updateRecomendaO<T extends Prisma.RecomendaOUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecomendaOUpdateArgs>
  ): Promise<PrismaRecomendaO> {
    return this.prisma.recomendaO.update<T>(args);
  }
  async deleteRecomendaO<T extends Prisma.RecomendaODeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecomendaODeleteArgs>
  ): Promise<PrismaRecomendaO> {
    return this.prisma.recomendaO.delete(args);
  }

  async getUsuRio(parentId: string): Promise<PrismaUsuRio | null> {
    return this.prisma.recomendaO
      .findUnique({
        where: { id: parentId },
      })
      .usuRio();
  }
}
