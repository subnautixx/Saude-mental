/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MeditaO } from "./MeditaO";
import { MeditaOCountArgs } from "./MeditaOCountArgs";
import { MeditaOFindManyArgs } from "./MeditaOFindManyArgs";
import { MeditaOFindUniqueArgs } from "./MeditaOFindUniqueArgs";
import { CreateMeditaOArgs } from "./CreateMeditaOArgs";
import { UpdateMeditaOArgs } from "./UpdateMeditaOArgs";
import { DeleteMeditaOArgs } from "./DeleteMeditaOArgs";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { MeditaOService } from "../meditaO.service";
@graphql.Resolver(() => MeditaO)
export class MeditaOResolverBase {
  constructor(protected readonly service: MeditaOService) {}

  async _meditaOSMeta(
    @graphql.Args() args: MeditaOCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MeditaO])
  async meditaOS(
    @graphql.Args() args: MeditaOFindManyArgs
  ): Promise<MeditaO[]> {
    return this.service.meditaOS(args);
  }

  @graphql.Query(() => MeditaO, { nullable: true })
  async meditaO(
    @graphql.Args() args: MeditaOFindUniqueArgs
  ): Promise<MeditaO | null> {
    const result = await this.service.meditaO(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MeditaO)
  async createMeditaO(
    @graphql.Args() args: CreateMeditaOArgs
  ): Promise<MeditaO> {
    return await this.service.createMeditaO({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MeditaO)
  async updateMeditaO(
    @graphql.Args() args: UpdateMeditaOArgs
  ): Promise<MeditaO | null> {
    try {
      return await this.service.updateMeditaO({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MeditaO)
  async deleteMeditaO(
    @graphql.Args() args: DeleteMeditaOArgs
  ): Promise<MeditaO | null> {
    try {
      return await this.service.deleteMeditaO(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(@graphql.Parent() parent: MeditaO): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
