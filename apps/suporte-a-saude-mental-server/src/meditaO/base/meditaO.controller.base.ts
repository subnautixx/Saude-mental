/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MeditaOService } from "../meditaO.service";
import { MeditaOCreateInput } from "./MeditaOCreateInput";
import { MeditaO } from "./MeditaO";
import { MeditaOFindManyArgs } from "./MeditaOFindManyArgs";
import { MeditaOWhereUniqueInput } from "./MeditaOWhereUniqueInput";
import { MeditaOUpdateInput } from "./MeditaOUpdateInput";

export class MeditaOControllerBase {
  constructor(protected readonly service: MeditaOService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MeditaO })
  async createMeditaO(
    @common.Body() data: MeditaOCreateInput
  ): Promise<MeditaO> {
    return await this.service.createMeditaO({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        descriO: true,
        duraOMinutos: true,
        id: true,
        nome: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MeditaO] })
  @ApiNestedQuery(MeditaOFindManyArgs)
  async meditaOS(@common.Req() request: Request): Promise<MeditaO[]> {
    const args = plainToClass(MeditaOFindManyArgs, request.query);
    return this.service.meditaOS({
      ...args,
      select: {
        createdAt: true,
        descriO: true,
        duraOMinutos: true,
        id: true,
        nome: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MeditaO })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async meditaO(
    @common.Param() params: MeditaOWhereUniqueInput
  ): Promise<MeditaO | null> {
    const result = await this.service.meditaO({
      where: params,
      select: {
        createdAt: true,
        descriO: true,
        duraOMinutos: true,
        id: true,
        nome: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MeditaO })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeditaO(
    @common.Param() params: MeditaOWhereUniqueInput,
    @common.Body() data: MeditaOUpdateInput
  ): Promise<MeditaO | null> {
    try {
      return await this.service.updateMeditaO({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          descriO: true,
          duraOMinutos: true,
          id: true,
          nome: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MeditaO })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeditaO(
    @common.Param() params: MeditaOWhereUniqueInput
  ): Promise<MeditaO | null> {
    try {
      return await this.service.deleteMeditaO({
        where: params,
        select: {
          createdAt: true,
          descriO: true,
          duraOMinutos: true,
          id: true,
          nome: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
