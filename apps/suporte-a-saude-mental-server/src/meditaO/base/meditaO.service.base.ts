/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MeditaO as PrismaMeditaO,
  UsuRio as PrismaUsuRio,
} from "@prisma/client";

export class MeditaOServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MeditaOCountArgs, "select">): Promise<number> {
    return this.prisma.meditaO.count(args);
  }

  async meditaOS<T extends Prisma.MeditaOFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeditaOFindManyArgs>
  ): Promise<PrismaMeditaO[]> {
    return this.prisma.meditaO.findMany<Prisma.MeditaOFindManyArgs>(args);
  }
  async meditaO<T extends Prisma.MeditaOFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeditaOFindUniqueArgs>
  ): Promise<PrismaMeditaO | null> {
    return this.prisma.meditaO.findUnique(args);
  }
  async createMeditaO<T extends Prisma.MeditaOCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeditaOCreateArgs>
  ): Promise<PrismaMeditaO> {
    return this.prisma.meditaO.create<T>(args);
  }
  async updateMeditaO<T extends Prisma.MeditaOUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeditaOUpdateArgs>
  ): Promise<PrismaMeditaO> {
    return this.prisma.meditaO.update<T>(args);
  }
  async deleteMeditaO<T extends Prisma.MeditaODeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeditaODeleteArgs>
  ): Promise<PrismaMeditaO> {
    return this.prisma.meditaO.delete(args);
  }

  async getUsuRio(parentId: string): Promise<PrismaUsuRio | null> {
    return this.prisma.meditaO
      .findUnique({
        where: { id: parentId },
      })
      .usuRio();
  }
}
