/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SessODeTerapia } from "./SessODeTerapia";
import { SessODeTerapiaCountArgs } from "./SessODeTerapiaCountArgs";
import { SessODeTerapiaFindManyArgs } from "./SessODeTerapiaFindManyArgs";
import { SessODeTerapiaFindUniqueArgs } from "./SessODeTerapiaFindUniqueArgs";
import { CreateSessODeTerapiaArgs } from "./CreateSessODeTerapiaArgs";
import { UpdateSessODeTerapiaArgs } from "./UpdateSessODeTerapiaArgs";
import { DeleteSessODeTerapiaArgs } from "./DeleteSessODeTerapiaArgs";
import { UsuRio } from "../../usuRio/base/UsuRio";
import { SessODeTerapiaService } from "../sessODeTerapia.service";
@graphql.Resolver(() => SessODeTerapia)
export class SessODeTerapiaResolverBase {
  constructor(protected readonly service: SessODeTerapiaService) {}

  async _sessODeTerapiasMeta(
    @graphql.Args() args: SessODeTerapiaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SessODeTerapia])
  async sessODeTerapias(
    @graphql.Args() args: SessODeTerapiaFindManyArgs
  ): Promise<SessODeTerapia[]> {
    return this.service.sessODeTerapias(args);
  }

  @graphql.Query(() => SessODeTerapia, { nullable: true })
  async sessODeTerapia(
    @graphql.Args() args: SessODeTerapiaFindUniqueArgs
  ): Promise<SessODeTerapia | null> {
    const result = await this.service.sessODeTerapia(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SessODeTerapia)
  async createSessODeTerapia(
    @graphql.Args() args: CreateSessODeTerapiaArgs
  ): Promise<SessODeTerapia> {
    return await this.service.createSessODeTerapia({
      ...args,
      data: {
        ...args.data,

        usuRio: args.data.usuRio
          ? {
              connect: args.data.usuRio,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SessODeTerapia)
  async updateSessODeTerapia(
    @graphql.Args() args: UpdateSessODeTerapiaArgs
  ): Promise<SessODeTerapia | null> {
    try {
      return await this.service.updateSessODeTerapia({
        ...args,
        data: {
          ...args.data,

          usuRio: args.data.usuRio
            ? {
                connect: args.data.usuRio,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SessODeTerapia)
  async deleteSessODeTerapia(
    @graphql.Args() args: DeleteSessODeTerapiaArgs
  ): Promise<SessODeTerapia | null> {
    try {
      return await this.service.deleteSessODeTerapia(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UsuRio, {
    nullable: true,
    name: "usuRio",
  })
  async getUsuRio(
    @graphql.Parent() parent: SessODeTerapia
  ): Promise<UsuRio | null> {
    const result = await this.service.getUsuRio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
