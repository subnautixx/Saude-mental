/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SessODeTerapiaService } from "../sessODeTerapia.service";
import { SessODeTerapiaCreateInput } from "./SessODeTerapiaCreateInput";
import { SessODeTerapia } from "./SessODeTerapia";
import { SessODeTerapiaFindManyArgs } from "./SessODeTerapiaFindManyArgs";
import { SessODeTerapiaWhereUniqueInput } from "./SessODeTerapiaWhereUniqueInput";
import { SessODeTerapiaUpdateInput } from "./SessODeTerapiaUpdateInput";

export class SessODeTerapiaControllerBase {
  constructor(protected readonly service: SessODeTerapiaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SessODeTerapia })
  async createSessODeTerapia(
    @common.Body() data: SessODeTerapiaCreateInput
  ): Promise<SessODeTerapia> {
    return await this.service.createSessODeTerapia({
      data: {
        ...data,

        usuRio: data.usuRio
          ? {
              connect: data.usuRio,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        data: true,
        id: true,
        notas: true,
        tipo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SessODeTerapia] })
  @ApiNestedQuery(SessODeTerapiaFindManyArgs)
  async sessODeTerapias(
    @common.Req() request: Request
  ): Promise<SessODeTerapia[]> {
    const args = plainToClass(SessODeTerapiaFindManyArgs, request.query);
    return this.service.sessODeTerapias({
      ...args,
      select: {
        createdAt: true,
        data: true,
        id: true,
        notas: true,
        tipo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SessODeTerapia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sessODeTerapia(
    @common.Param() params: SessODeTerapiaWhereUniqueInput
  ): Promise<SessODeTerapia | null> {
    const result = await this.service.sessODeTerapia({
      where: params,
      select: {
        createdAt: true,
        data: true,
        id: true,
        notas: true,
        tipo: true,
        updatedAt: true,

        usuRio: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SessODeTerapia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSessODeTerapia(
    @common.Param() params: SessODeTerapiaWhereUniqueInput,
    @common.Body() data: SessODeTerapiaUpdateInput
  ): Promise<SessODeTerapia | null> {
    try {
      return await this.service.updateSessODeTerapia({
        where: params,
        data: {
          ...data,

          usuRio: data.usuRio
            ? {
                connect: data.usuRio,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          data: true,
          id: true,
          notas: true,
          tipo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SessODeTerapia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSessODeTerapia(
    @common.Param() params: SessODeTerapiaWhereUniqueInput
  ): Promise<SessODeTerapia | null> {
    try {
      return await this.service.deleteSessODeTerapia({
        where: params,
        select: {
          createdAt: true,
          data: true,
          id: true,
          notas: true,
          tipo: true,
          updatedAt: true,

          usuRio: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
